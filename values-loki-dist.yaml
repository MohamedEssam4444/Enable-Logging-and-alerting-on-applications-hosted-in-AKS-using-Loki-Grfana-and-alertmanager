loki:
  # to store logs, can either tsore logs on filesystem or a cloud store which is better for reliability
  # stored on azure storage.
  # for info https://grafana.com/docs/loki/latest/storage/#azure-deployment-azure-blob-storage-single-store
  storage:
    type: azure
    azure:
      # store as a secret, storage account & key for calling azure blob storage.
      accountName: ${STORAGE_ACCOUNT_NAME}
      accountKey: ${STORAGE_ACCOUNT_KEY}
      container_name: lokichunks
      request_timeout: 0
    boltdb_shipper:
      active_index_directory: /var/loki/boltdb-shipper-active
      cache_location: /var/loki/boltdb-shipper-cache
      cache_ttl: 24h
      shared_store: azure
    filesystem: null

  schemaConfig:
    configs:
      - from: "2023-11-18"
        index:
          period: 24h
          prefix: index_
        store: boltdb-shipper
        object_store: azure
        schema: v11
# config including alert manager url, ruler and compactor configs and other configs.
  config: |
    auth_enabled: false

    server:
      {{- toYaml .Values.loki.server | nindent 6 }}

    common:
      compactor_address: http://{{ include "loki.compactorFullname" . }}:3100

    distributor:
      ring:
        kvstore:
          store: memberlist

    memberlist:
      join_members:
        - {{ include "loki.fullname" . }}-memberlist

    ingester_client:
      grpc_client_config:
        grpc_compression: gzip

    ingester:
      lifecycler:
        ring:
          kvstore:
            store: memberlist
          replication_factor: 1
      chunk_idle_period: 30m
      chunk_block_size: 262144
      chunk_encoding: snappy
      chunk_retain_period: 5m
      max_transfer_retries: 0
      wal:
        dir: /var/loki/wal

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_cache_freshness_per_query: 10m
      split_queries_by_interval: 15m
      max_query_series: 2000

    {{- if .Values.loki.schemaConfig}}
    schema_config:
    {{- toYaml .Values.loki.schemaConfig | nindent 2}}
    {{- end}}
    {{- if .Values.loki.storageConfig}}
    storage_config:
    {{- if .Values.indexGateway.enabled}}
    {{- $indexGatewayClient := dict "server_address" (printf "dns:///%s:9095" (include "loki.indexGatewayFullname" .)) }}
    {{- $_ := set .Values.loki.storageConfig.boltdb_shipper "index_gateway_client" $indexGatewayClient }}
    {{- end}}
    {{- toYaml .Values.loki.storageConfig | nindent 2}}
    {{- if .Values.memcachedIndexQueries.enabled }}
      index_queries_cache_config:
        memcached_client:
          addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedIndexQueriesFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
          consistent_hash: true
    {{- end}}
    {{- end}}

    runtime_config:
      file: /var/{{ include "loki.name" . }}-runtime/runtime.yaml

    chunk_store_config:
      max_look_back_period: 0s
      {{- if .Values.memcachedChunks.enabled }}
      chunk_cache_config:
        embedded_cache:
          enabled: false
        memcached_client:
          consistent_hash: true
          addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedChunksFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
      {{- end }}
      {{- if .Values.memcachedIndexWrites.enabled }}
      write_dedupe_cache_config:
        memcached_client:
          consistent_hash: true
          addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedIndexWritesFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
      {{- end }}

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s

    query_range:
      align_queries_with_step: true
      max_retries: 5
      cache_results: true
      results_cache:
        cache:
          {{- if .Values.memcachedFrontend.enabled }}
          memcached_client:
            addresses: dnssrv+_memcached-client._tcp.{{ include "loki.memcachedFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
            consistent_hash: true
          {{- else }}
          embedded_cache:
            enabled: true
            ttl: 24h
          {{- end }}

    frontend_worker:
      {{- if .Values.queryScheduler.enabled }}
      scheduler_address: {{ include "loki.querySchedulerFullname" . }}:9095
      {{- else }}
      frontend_address: {{ include "loki.queryFrontendFullname" . }}-headless:9095
      {{- end }}

    frontend:
      log_queries_longer_than: 5s
      compress_responses: true
      {{- if .Values.queryScheduler.enabled }}
      scheduler_address: {{ include "loki.querySchedulerFullname" . }}:9095
      {{- end }}
      tail_proxy_url: http://{{ include "loki.querierFullname" . }}:3100

    compactor:
      shared_store: azure

    ruler:
      storage:
        type: local
        local:
          directory: /etc/loki/rules
      ring:
        kvstore:
          store: memberlist
      rule_path: /tmp/loki/scratch
      alertmanager_url: http://alertmanager-operated:9093 
      enable_alertmanager_v2: true

# Added the extra args for getting the secret value of storage account name and key to talk to azure blob store.
ingester: 
  extraArgs:
  - -config.expand-env=true
  extraEnv:
    - name: STORAGE_ACCOUNT_NAME
      valueFrom:
        secretKeyRef:
          name: loki-objstore-config
          key: accountName
    - name: STORAGE_ACCOUNT_KEY
      valueFrom:
        secretKeyRef:
          name: loki-objstore-config
          key: accountKey

compactor:
  enabled: true
  extraArgs:
  - -config.expand-env=true
  extraEnv:
    - name: STORAGE_ACCOUNT_NAME
      valueFrom:
        secretKeyRef:
          name: loki-objstore-config
          key: accountName
    - name: STORAGE_ACCOUNT_KEY
      valueFrom:
        secretKeyRef:
          name: loki-objstore-config
          key: accountKey

# queryFontend is enabled by default in the helm chart.

querier:
  # enable autoscaling only in indexGateway is enabled.
  autoscaling:
    enabled: true

indexGateway:
  enabled: true
  extraArgs:
    - -config.expand-env=true
  extraEnv:
    - name: STORAGE_ACCOUNT_NAME
      valueFrom:
        secretKeyRef:
          name: loki-objstore-config
          key: accountName
    - name: STORAGE_ACCOUNT_KEY
      valueFrom:
        secretKeyRef:
          name: loki-objstore-config
          key: accountKey


# Configuration for the ruler.
ruler:
  # -- Specifies whether the ruler should be enabled
  enabled: true
  extraArgs:
  - -config.expand-env=true
  extraEnv:
    - name: STORAGE_ACCOUNT_NAME
      valueFrom:
        secretKeyRef:
          name: loki-objstore-config
          key: accountName
    - name: STORAGE_ACCOUNT_KEY
      valueFrom:
        secretKeyRef:
          name: loki-objstore-config
          key: accountKey

  # -- Directories containing rules files
  directories:
    tenant_foo:
      rules1.txt: |
        groups:
          - name: credentials_leak
            rules:
              - alert: http-credentials-leaked
                annotations:
                  message: "{{ $labels.job }} is leaking http basic auth credentials."
                expr: 'sum by (cluster, job, pod) (count_over_time({namespace="test-grafana-loki"} |~ "http(s?)://(\\w+):(\\w+)@" [5m]) > 0)'
                for: 10m
                labels:
                  severity: critical
      rules2.txt: | 
        groups:
          - name: kinetic_mobility_error
            rules:
              - alert: error
                expr: sum(rate({namespace="test-grafana-loki"} |~ `(?i)level=error` | pattern `<message>` [5m])) by (message) > 0
                for: 1m
                labels:
                  severity: critical
                  namespace: prod
                  category: logs
                annotations:
                  summary: "There are error log level error logs on PROD"
          - name: kinetic_mobility_alert
            rules:
              - alert: Alert
                expr: sum(rate({namespace="test-grafana-loki"} |~ `(?i)level=alert` | pattern `<message>` [5m])) by (message) > 0
                for: 1m
                labels:
                  severity: critical
                  namespace: prod
                  category: logs
                annotations:
                  summary: "There are alert log level error logs on PROD"
          - name: kinetic_mobility_critical
            rules:
              - alert: Critical
                expr: sum(rate({namespace="test-grafana-loki"} |~ `(?i)level=critical` | pattern `<message>` [5m])) by (message) > 0
                for: 1m
                labels:
                  severity: critical
                  namespace: prod
                  category: logs
                annotations:
                  summary: "There are critical log level error logs on PROD"
          - name: kinetic_mobility_emergency
            rules:
              - alert: Emergency
                expr: sum(rate({namespace="test-grafana-loki"} |~ `(?i)level=emergency` | pattern `<message>` [5m])) by (message) > 0
                for: 1m
                labels:
                  severity: critical
                  namespace: prod
                  category: logs
                annotations:
                  summary: "There are emerency log level error logs on PROD"